/**
 * generated by Xtext 2.25.0
 */
package org.xtext.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.registrationDSL.Attribute;
import org.xtext.registrationDSL.Entity;
import org.xtext.registrationDSL.RegistrationDSLPackage;
import org.xtext.registrationDSL.Variable;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class RegistrationDSLScopeProvider extends AbstractRegistrationDSLScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference refrence) {
    IScope _xblockexpression = null;
    {
      boolean _matched = false;
      if (context instanceof Variable) {
        boolean _equals = Objects.equal(refrence, RegistrationDSLPackage.Literals.VARIABLE__NAME);
        if (_equals) {
          _matched=true;
          final Entity entity = EcoreUtil2.<Entity>getContainerOfType(context, Entity.class);
          return Scopes.scopeFor(this.allAtributes(entity));
        }
      }
      _xblockexpression = super.getScope(context, refrence);
    }
    return _xblockexpression;
  }
  
  public Iterable<? extends EObject> allAtributes(final Entity entity) {
    ArrayList<Attribute> _xblockexpression = null;
    {
      final ArrayList<Attribute> candidates = new ArrayList<Attribute>();
      final HashSet<Entity> seen = new HashSet<Entity>();
      Entity e = entity;
      while ((e != null)) {
        {
          boolean _contains = seen.contains(e);
          if (_contains) {
            return Collections.EMPTY_LIST;
          }
          seen.add(e);
          Iterables.<Attribute>addAll(candidates, Iterables.<Attribute>filter(e.getFields(), Attribute.class));
          e = e.getBase();
        }
      }
      _xblockexpression = candidates;
    }
    return _xblockexpression;
  }
}
