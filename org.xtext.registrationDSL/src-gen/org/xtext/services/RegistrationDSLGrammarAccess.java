/*
 * generated by Xtext 2.25.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RegistrationDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RegistationsystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Registationsystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Registationsystem:
		//    'system' name =ID '{' declarations += Declaration* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name =ID '{' declarations += Declaration* '}'
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name =ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//declarations += Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkflowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExternalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Declaration:
		//    Entity | Workflow | External
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | Workflow | External
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//Workflow
		public RuleCall getWorkflowParserRuleCall_1() { return cWorkflowParserRuleCall_1; }
		
		//External
		public RuleCall getExternalParserRuleCall_2() { return cExternalParserRuleCall_2; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cBaseEntityCrossReference_2_1_0 = (CrossReference)cBaseAssignment_2_1.eContents().get(0);
		private final RuleCall cBaseEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cBaseEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsFieldParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entity:
		//    'entity' name=ID (':' base=[Entity])? '{' fields += Field* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID (':' base=[Entity])? '{' fields += Field* '}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' base=[Entity])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//base=[Entity]
		public Assignment getBaseAssignment_2_1() { return cBaseAssignment_2_1; }
		
		//[Entity]
		public CrossReference getBaseEntityCrossReference_2_1_0() { return cBaseEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getBaseEntityIDTerminalRuleCall_2_1_0_1() { return cBaseEntityIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//fields += Field*
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_0() { return cFieldsFieldParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Field");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRequireParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Field:
		//    Attribute | Relation | Require
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | Relation | Require
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
		
		//Require
		public RuleCall getRequireParserRuleCall_2() { return cRequireParserRuleCall_2; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Attribute:
		//    'attribute' name=ID ':' type=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' name=ID ':' type=ID
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetEntityCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetEntityCrossReference_3_0.eContents().get(1);
		
		//Relation:
		//    'relation' name=ID ':' target=[Entity]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'relation' name=ID ':' target=[Entity]
		public Group getGroup() { return cGroup; }
		
		//'relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//target=[Entity]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[Entity]
		public CrossReference getTargetEntityCrossReference_3_0() { return cTargetEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetEntityIDTerminalRuleCall_3_0_1() { return cTargetEntityIDTerminalRuleCall_3_0_1; }
	}
	public class RequireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Require");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLogicAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogicLogicParserRuleCall_1_0 = (RuleCall)cLogicAssignment_1.eContents().get(0);
		
		//Require:
		//    'require' logic=Logic
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'require' logic=Logic
		public Group getGroup() { return cGroup; }
		
		//'require'
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//logic=Logic
		public Assignment getLogicAssignment_1() { return cLogicAssignment_1; }
		
		//Logic
		public RuleCall getLogicLogicParserRuleCall_1_0() { return cLogicLogicParserRuleCall_1_0; }
	}
	public class ExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.External");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersIDTerminalRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//External:
		//    'external' name=ID '(' parameters += ID (',' parameters += ID)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'external' name=ID '(' parameters += ID (',' parameters += ID)* ')'
		public Group getGroup() { return cGroup; }
		
		//'external'
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parameters += ID
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_3_0() { return cParametersIDTerminalRuleCall_3_0; }
		
		//(',' parameters += ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//parameters += ID
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_4_1_0() { return cParametersIDTerminalRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class WorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Workflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Workflow:
		//    'workflow' name=ID '{' statements += Statement* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'workflow' name=ID '{' statements += Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//'workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRegisterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//    Select | Add | Register
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Select | Add | Register
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Select
		public RuleCall getSelectParserRuleCall_0() { return cSelectParserRuleCall_0; }
		
		//Add
		public RuleCall getAddParserRuleCall_1() { return cAddParserRuleCall_1; }
		
		//Register
		public RuleCall getRegisterParserRuleCall_2() { return cRegisterParserRuleCall_2; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSelectTypeEntityCrossReference_1_0 = (CrossReference)cSelectTypeAssignment_1.eContents().get(0);
		private final RuleCall cSelectTypeEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cSelectTypeEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cEntityNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntityNameIDTerminalRuleCall_2_0 = (RuleCall)cEntityNameAssignment_2.eContents().get(0);
		
		//Select:
		//    'select' selectType=[Entity] entityName=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' selectType=[Entity] entityName=ID
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//selectType=[Entity]
		public Assignment getSelectTypeAssignment_1() { return cSelectTypeAssignment_1; }
		
		//[Entity]
		public CrossReference getSelectTypeEntityCrossReference_1_0() { return cSelectTypeEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getSelectTypeEntityIDTerminalRuleCall_1_0_1() { return cSelectTypeEntityIDTerminalRuleCall_1_0_1; }
		
		//entityName=ID
		public Assignment getEntityNameAssignment_2() { return cEntityNameAssignment_2; }
		
		//ID
		public RuleCall getEntityNameIDTerminalRuleCall_2_0() { return cEntityNameIDTerminalRuleCall_2_0; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectedEntityNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectedEntityNameIDTerminalRuleCall_1_0 = (RuleCall)cSelectedEntityNameAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToEntityIDTerminalRuleCall_3_0 = (RuleCall)cToEntityAssignment_3.eContents().get(0);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToEntityRelationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToEntityRelationIDTerminalRuleCall_5_0 = (RuleCall)cToEntityRelationAssignment_5.eContents().get(0);
		
		//Add:
		//    'add' selectedEntityName=ID 'to' toEntity=ID '.' toEntityRelation=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' selectedEntityName=ID 'to' toEntity=ID '.' toEntityRelation=ID
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//selectedEntityName=ID
		public Assignment getSelectedEntityNameAssignment_1() { return cSelectedEntityNameAssignment_1; }
		
		//ID
		public RuleCall getSelectedEntityNameIDTerminalRuleCall_1_0() { return cSelectedEntityNameIDTerminalRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//toEntity=ID
		public Assignment getToEntityAssignment_3() { return cToEntityAssignment_3; }
		
		//ID
		public RuleCall getToEntityIDTerminalRuleCall_3_0() { return cToEntityIDTerminalRuleCall_3_0; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//toEntityRelation=ID
		public Assignment getToEntityRelationAssignment_5() { return cToEntityRelationAssignment_5; }
		
		//ID
		public RuleCall getToEntityRelationIDTerminalRuleCall_5_0() { return cToEntityRelationIDTerminalRuleCall_5_0; }
	}
	public class RegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Register");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegisterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEntityCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Register:
		//    'register' type=[Entity] name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'register' type=[Entity] name=ID
		public Group getGroup() { return cGroup; }
		
		//'register'
		public Keyword getRegisterKeyword_0() { return cRegisterKeyword_0; }
		
		//type=[Entity]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Entity]
		public CrossReference getTypeEntityCrossReference_1_0() { return cTypeEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_1_0_1() { return cTypeEntityIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class LogicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Logic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cOrLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjunctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Logic returns LogicExp:
		//    Conjunction ('||' {Or.left=current} right=Conjunction)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Conjunction ('||' {Or.left=current} right=Conjunction)*
		public Group getGroup() { return cGroup; }
		
		//Conjunction
		public RuleCall getConjunctionParserRuleCall_0() { return cConjunctionParserRuleCall_0; }
		
		//('||' {Or.left=current} right=Conjunction)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_1() { return cOrLeftAction_1_1; }
		
		//right=Conjunction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Conjunction
		public RuleCall getRightConjunctionParserRuleCall_1_2_0() { return cRightConjunctionParserRuleCall_1_2_0; }
	}
	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimLogicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cAndLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimLogicParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Conjunction returns LogicExp:
		//    PrimLogic ('&&' {And.left=current} right=PrimLogic)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimLogic ('&&' {And.left=current} right=PrimLogic)*
		public Group getGroup() { return cGroup; }
		
		//PrimLogic
		public RuleCall getPrimLogicParserRuleCall_0() { return cPrimLogicParserRuleCall_0; }
		
		//('&&' {And.left=current} right=PrimLogic)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_1() { return cAndLeftAction_1_1; }
		
		//right=PrimLogic
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimLogic
		public RuleCall getRightPrimLogicParserRuleCall_1_2_0() { return cRightPrimLogicParserRuleCall_1_2_0; }
	}
	public class PrimLogicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.PrimLogic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExternalCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComparisonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLogicAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLogicLogicParserRuleCall_2_1_0 = (RuleCall)cLogicAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimLogic returns LogicExp:
		//    ExternalCall | Comparison | '[' logic=Logic ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExternalCall | Comparison | '[' logic=Logic ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExternalCall
		public RuleCall getExternalCallParserRuleCall_0() { return cExternalCallParserRuleCall_0; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_1() { return cComparisonParserRuleCall_1; }
		
		//'[' logic=Logic ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//logic=Logic
		public Assignment getLogicAssignment_2_1() { return cLogicAssignment_2_1; }
		
		//Logic
		public RuleCall getLogicLogicParserRuleCall_2_1_0() { return cLogicLogicParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class ExternalCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.ExternalCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetExternalCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetExternalIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetExternalCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsExpParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsExpParserRuleCall_3_1_0 = (RuleCall)cArgumentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExternalCall:
		//    target=[External] '(' arguments += Exp (',' arguments += Exp)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//target=[External] '(' arguments += Exp (',' arguments += Exp)* ')'
		public Group getGroup() { return cGroup; }
		
		//target=[External]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//[External]
		public CrossReference getTargetExternalCrossReference_0_0() { return cTargetExternalCrossReference_0_0; }
		
		//ID
		public RuleCall getTargetExternalIDTerminalRuleCall_0_0_1() { return cTargetExternalIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//arguments += Exp
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//Exp
		public RuleCall getArgumentsExpParserRuleCall_2_0() { return cArgumentsExpParserRuleCall_2_0; }
		
		//(',' arguments += Exp)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//arguments += Exp
		public Assignment getArgumentsAssignment_3_1() { return cArgumentsAssignment_3_1; }
		
		//Exp
		public RuleCall getArgumentsExpParserRuleCall_3_1_0() { return cArgumentsExpParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpCompareOpParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Comparison:
		//    left=Exp op=CompareOp right=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Exp op=CompareOp right=Exp
		public Group getGroup() { return cGroup; }
		
		//left=Exp
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Exp
		public RuleCall getLeftExpParserRuleCall_0_0() { return cLeftExpParserRuleCall_0_0; }
		
		//op=CompareOp
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//CompareOp
		public RuleCall getOpCompareOpParserRuleCall_1_0() { return cOpCompareOpParserRuleCall_1_0; }
		
		//right=Exp
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Exp
		public RuleCall getRightExpParserRuleCall_2_0() { return cRightExpParserRuleCall_2_0; }
	}
	public class CompareOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.CompareOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//CompareOp:
		//    '<' | '>' | '==' | '<=' | '>='
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '>' | '==' | '<=' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cMinusLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp returns Expression:
		//    Factor (('+' {Plus.left=current}| '-' {Minus.left=current}) right=Factor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (('+' {Plus.left=current}| '-' {Minus.left=current}) right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(('+' {Plus.left=current}| '-' {Minus.left=current}) right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' {Plus.left=current}| '-' {Minus.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+' {Plus.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0() { return cPlusSignKeyword_1_0_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_1() { return cPlusLeftAction_1_0_0_1; }
		
		//'-' {Minus.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_0() { return cHyphenMinusKeyword_1_0_1_0; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_1() { return cMinusLeftAction_1_0_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cDivLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimExpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Factor returns Expression:
		//    PrimExp (('*' {Mult.left=current} | '/' {Div.left=current}) right=PrimExp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimExp (('*' {Mult.left=current} | '/' {Div.left=current}) right=PrimExp)*
		public Group getGroup() { return cGroup; }
		
		//PrimExp
		public RuleCall getPrimExpParserRuleCall_0() { return cPrimExpParserRuleCall_0; }
		
		//(('*' {Mult.left=current} | '/' {Div.left=current}) right=PrimExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*' {Mult.left=current} | '/' {Div.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*' {Mult.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0() { return cAsteriskKeyword_1_0_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_1() { return cMultLeftAction_1_0_0_1; }
		
		//'/' {Div.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_0() { return cSolidusKeyword_1_0_1_0; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_1() { return cDivLeftAction_1_0_1_1; }
		
		//right=PrimExp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimExp
		public RuleCall getRightPrimExpParserRuleCall_1_1_0() { return cRightPrimExpParserRuleCall_1_1_0; }
	}
	public class PrimExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.PrimExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_2_1_0 = (RuleCall)cExpAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimExp returns Expression:
		//    Var | Constant | '(' exp=Exp ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Var | Constant | '(' exp=Exp ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Var
		public RuleCall getVarParserRuleCall_0() { return cVarParserRuleCall_0; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }
		
		//'(' exp=Exp ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//exp=Exp
		public Assignment getExpAssignment_2_1() { return cExpAssignment_2_1; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_1_0() { return cExpExpParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameAttributeCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cNameAttributeCrossReference_1_0.eContents().get(1);
		
		//Var:
		//    {Variable} name=[Attribute]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} name=[Attribute]
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//name=[Attribute]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Attribute]
		public CrossReference getNameAttributeCrossReference_1_0() { return cNameAttributeCrossReference_1_0; }
		
		//ID
		public RuleCall getNameAttributeIDTerminalRuleCall_1_0_1() { return cNameAttributeIDTerminalRuleCall_1_0_1; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.RegistrationDSL.Constant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Constant:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	
	private final RegistationsystemElements pRegistationsystem;
	private final DeclarationElements pDeclaration;
	private final EntityElements pEntity;
	private final FieldElements pField;
	private final AttributeElements pAttribute;
	private final RelationElements pRelation;
	private final RequireElements pRequire;
	private final ExternalElements pExternal;
	private final WorkflowElements pWorkflow;
	private final StatementElements pStatement;
	private final SelectElements pSelect;
	private final AddElements pAdd;
	private final RegisterElements pRegister;
	private final LogicElements pLogic;
	private final ConjunctionElements pConjunction;
	private final PrimLogicElements pPrimLogic;
	private final ExternalCallElements pExternalCall;
	private final ComparisonElements pComparison;
	private final CompareOpElements pCompareOp;
	private final ExpElements pExp;
	private final FactorElements pFactor;
	private final PrimExpElements pPrimExp;
	private final VarElements pVar;
	private final ConstantElements pConstant;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RegistrationDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRegistationsystem = new RegistationsystemElements();
		this.pDeclaration = new DeclarationElements();
		this.pEntity = new EntityElements();
		this.pField = new FieldElements();
		this.pAttribute = new AttributeElements();
		this.pRelation = new RelationElements();
		this.pRequire = new RequireElements();
		this.pExternal = new ExternalElements();
		this.pWorkflow = new WorkflowElements();
		this.pStatement = new StatementElements();
		this.pSelect = new SelectElements();
		this.pAdd = new AddElements();
		this.pRegister = new RegisterElements();
		this.pLogic = new LogicElements();
		this.pConjunction = new ConjunctionElements();
		this.pPrimLogic = new PrimLogicElements();
		this.pExternalCall = new ExternalCallElements();
		this.pComparison = new ComparisonElements();
		this.pCompareOp = new CompareOpElements();
		this.pExp = new ExpElements();
		this.pFactor = new FactorElements();
		this.pPrimExp = new PrimExpElements();
		this.pVar = new VarElements();
		this.pConstant = new ConstantElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.RegistrationDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Registationsystem:
	//    'system' name =ID '{' declarations += Declaration* '}'
	//;
	public RegistationsystemElements getRegistationsystemAccess() {
		return pRegistationsystem;
	}
	
	public ParserRule getRegistationsystemRule() {
		return getRegistationsystemAccess().getRule();
	}
	
	//Declaration:
	//    Entity | Workflow | External
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Entity:
	//    'entity' name=ID (':' base=[Entity])? '{' fields += Field* '}'
	//;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Field:
	//    Attribute | Relation | Require
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Attribute:
	//    'attribute' name=ID ':' type=ID
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Relation:
	//    'relation' name=ID ':' target=[Entity]
	//;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//Require:
	//    'require' logic=Logic
	//;
	public RequireElements getRequireAccess() {
		return pRequire;
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}
	
	//External:
	//    'external' name=ID '(' parameters += ID (',' parameters += ID)* ')'
	//;
	public ExternalElements getExternalAccess() {
		return pExternal;
	}
	
	public ParserRule getExternalRule() {
		return getExternalAccess().getRule();
	}
	
	//Workflow:
	//    'workflow' name=ID '{' statements += Statement* '}'
	//;
	public WorkflowElements getWorkflowAccess() {
		return pWorkflow;
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}
	
	//Statement:
	//    Select | Add | Register
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Select:
	//    'select' selectType=[Entity] entityName=ID
	//;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//Add:
	//    'add' selectedEntityName=ID 'to' toEntity=ID '.' toEntityRelation=ID
	//;
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Register:
	//    'register' type=[Entity] name=ID
	//;
	public RegisterElements getRegisterAccess() {
		return pRegister;
	}
	
	public ParserRule getRegisterRule() {
		return getRegisterAccess().getRule();
	}
	
	//Logic returns LogicExp:
	//    Conjunction ('||' {Or.left=current} right=Conjunction)*
	//;
	public LogicElements getLogicAccess() {
		return pLogic;
	}
	
	public ParserRule getLogicRule() {
		return getLogicAccess().getRule();
	}
	
	//Conjunction returns LogicExp:
	//    PrimLogic ('&&' {And.left=current} right=PrimLogic)*
	//;
	public ConjunctionElements getConjunctionAccess() {
		return pConjunction;
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}
	
	//PrimLogic returns LogicExp:
	//    ExternalCall | Comparison | '[' logic=Logic ']'
	//;
	public PrimLogicElements getPrimLogicAccess() {
		return pPrimLogic;
	}
	
	public ParserRule getPrimLogicRule() {
		return getPrimLogicAccess().getRule();
	}
	
	//ExternalCall:
	//    target=[External] '(' arguments += Exp (',' arguments += Exp)* ')'
	//;
	public ExternalCallElements getExternalCallAccess() {
		return pExternalCall;
	}
	
	public ParserRule getExternalCallRule() {
		return getExternalCallAccess().getRule();
	}
	
	//Comparison:
	//    left=Exp op=CompareOp right=Exp
	//;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//CompareOp:
	//    '<' | '>' | '==' | '<=' | '>='
	//;
	public CompareOpElements getCompareOpAccess() {
		return pCompareOp;
	}
	
	public ParserRule getCompareOpRule() {
		return getCompareOpAccess().getRule();
	}
	
	//Exp returns Expression:
	//    Factor (('+' {Plus.left=current}| '-' {Minus.left=current}) right=Factor)*
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Factor returns Expression:
	//    PrimExp (('*' {Mult.left=current} | '/' {Div.left=current}) right=PrimExp)*
	//;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//PrimExp returns Expression:
	//    Var | Constant | '(' exp=Exp ')'
	//;
	public PrimExpElements getPrimExpAccess() {
		return pPrimExp;
	}
	
	public ParserRule getPrimExpRule() {
		return getPrimExpAccess().getRule();
	}
	
	//Var:
	//    {Variable} name=[Attribute]
	//;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//Constant:
	//    value=INT
	//;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
