/*
 * generated by Xtext 2.25.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.registrationDSL.Add;
import org.xtext.registrationDSL.And;
import org.xtext.registrationDSL.Attribute;
import org.xtext.registrationDSL.Comparison;
import org.xtext.registrationDSL.Constant;
import org.xtext.registrationDSL.Div;
import org.xtext.registrationDSL.Entity;
import org.xtext.registrationDSL.Expression;
import org.xtext.registrationDSL.External;
import org.xtext.registrationDSL.ExternalCall;
import org.xtext.registrationDSL.LogicExp;
import org.xtext.registrationDSL.Minus;
import org.xtext.registrationDSL.Mult;
import org.xtext.registrationDSL.Or;
import org.xtext.registrationDSL.Plus;
import org.xtext.registrationDSL.Registationsystem;
import org.xtext.registrationDSL.Register;
import org.xtext.registrationDSL.RegistrationDSLPackage;
import org.xtext.registrationDSL.Relation;
import org.xtext.registrationDSL.Require;
import org.xtext.registrationDSL.Select;
import org.xtext.registrationDSL.Variable;
import org.xtext.registrationDSL.Workflow;
import org.xtext.services.RegistrationDSLGrammarAccess;

@SuppressWarnings("all")
public class RegistrationDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RegistrationDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RegistrationDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RegistrationDSLPackage.ADD:
				sequence_Add(context, (Add) semanticObject); 
				return; 
			case RegistrationDSLPackage.AND:
				sequence_Conjunction(context, (And) semanticObject); 
				return; 
			case RegistrationDSLPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case RegistrationDSLPackage.COMPARISON:
				sequence_Comparison(context, (Comparison) semanticObject); 
				return; 
			case RegistrationDSLPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case RegistrationDSLPackage.DIV:
				sequence_Factor(context, (Div) semanticObject); 
				return; 
			case RegistrationDSLPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case RegistrationDSLPackage.EXPRESSION:
				sequence_PrimExp(context, (Expression) semanticObject); 
				return; 
			case RegistrationDSLPackage.EXTERNAL:
				sequence_External(context, (External) semanticObject); 
				return; 
			case RegistrationDSLPackage.EXTERNAL_CALL:
				sequence_ExternalCall(context, (ExternalCall) semanticObject); 
				return; 
			case RegistrationDSLPackage.LOGIC_EXP:
				sequence_PrimLogic(context, (LogicExp) semanticObject); 
				return; 
			case RegistrationDSLPackage.MINUS:
				sequence_Exp(context, (Minus) semanticObject); 
				return; 
			case RegistrationDSLPackage.MULT:
				sequence_Factor(context, (Mult) semanticObject); 
				return; 
			case RegistrationDSLPackage.OR:
				sequence_Logic(context, (Or) semanticObject); 
				return; 
			case RegistrationDSLPackage.PLUS:
				sequence_Exp(context, (Plus) semanticObject); 
				return; 
			case RegistrationDSLPackage.REGISTATIONSYSTEM:
				sequence_Registationsystem(context, (Registationsystem) semanticObject); 
				return; 
			case RegistrationDSLPackage.REGISTER:
				sequence_Register(context, (Register) semanticObject); 
				return; 
			case RegistrationDSLPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			case RegistrationDSLPackage.REQUIRE:
				sequence_Require(context, (Require) semanticObject); 
				return; 
			case RegistrationDSLPackage.SELECT:
				sequence_Select(context, (Select) semanticObject); 
				return; 
			case RegistrationDSLPackage.VARIABLE:
				sequence_Var(context, (Variable) semanticObject); 
				return; 
			case RegistrationDSLPackage.WORKFLOW:
				sequence_Workflow(context, (Workflow) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Statement returns Add
	 *     Add returns Add
	 *
	 * Constraint:
	 *     (selectedEntityName=ID toEntity=ID toEntityRelation=ID)
	 */
	protected void sequence_Add(ISerializationContext context, Add semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.ADD__SELECTED_ENTITY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.ADD__SELECTED_ENTITY_NAME));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.ADD__TO_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.ADD__TO_ENTITY));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.ADD__TO_ENTITY_RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.ADD__TO_ENTITY_RELATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddAccess().getSelectedEntityNameIDTerminalRuleCall_1_0(), semanticObject.getSelectedEntityName());
		feeder.accept(grammarAccess.getAddAccess().getToEntityIDTerminalRuleCall_3_0(), semanticObject.getToEntity());
		feeder.accept(grammarAccess.getAddAccess().getToEntityRelationIDTerminalRuleCall_5_0(), semanticObject.getToEntityRelation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Attribute
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=ID)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeIDTerminalRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Logic returns Comparison
	 *     Logic.Or_1_1 returns Comparison
	 *     Conjunction returns Comparison
	 *     Conjunction.And_1_1 returns Comparison
	 *     PrimLogic returns Comparison
	 *     Comparison returns Comparison
	 *
	 * Constraint:
	 *     (left=Exp op=CompareOp right=Exp)
	 */
	protected void sequence_Comparison(ISerializationContext context, Comparison semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.COMPARISON__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.COMPARISON__LEFT));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.COMPARISON__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.COMPARISON__OP));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.COMPARISON__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.COMPARISON__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonAccess().getLeftExpParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getComparisonAccess().getOpCompareOpParserRuleCall_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getComparisonAccess().getRightExpParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Logic returns And
	 *     Logic.Or_1_1 returns And
	 *     Conjunction returns And
	 *     Conjunction.And_1_1 returns And
	 *
	 * Constraint:
	 *     (left=Conjunction_And_1_1 right=PrimLogic)
	 */
	protected void sequence_Conjunction(ISerializationContext context, And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConjunctionAccess().getAndLeftAction_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getConjunctionAccess().getRightPrimLogicParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Constant
	 *     Exp.Plus_1_0_0_1 returns Constant
	 *     Exp.Minus_1_0_1_1 returns Constant
	 *     Factor returns Constant
	 *     Factor.Mult_1_0_0_1 returns Constant
	 *     Factor.Div_1_0_1_1 returns Constant
	 *     PrimExp returns Constant
	 *     Constant returns Constant
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Constant(ISerializationContext context, Constant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID base=[Entity|ID]? fields+=Field*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Minus
	 *     Exp.Plus_1_0_0_1 returns Minus
	 *     Exp.Minus_1_0_1_1 returns Minus
	 *
	 * Constraint:
	 *     (left=Exp_Minus_1_0_1_1 right=Factor)
	 */
	protected void sequence_Exp(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getMinusLeftAction_1_0_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Plus
	 *     Exp.Plus_1_0_0_1 returns Plus
	 *     Exp.Minus_1_0_1_1 returns Plus
	 *
	 * Constraint:
	 *     (left=Exp_Plus_1_0_0_1 right=Factor)
	 */
	protected void sequence_Exp(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getPlusLeftAction_1_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Logic returns ExternalCall
	 *     Logic.Or_1_1 returns ExternalCall
	 *     Conjunction returns ExternalCall
	 *     Conjunction.And_1_1 returns ExternalCall
	 *     PrimLogic returns ExternalCall
	 *     ExternalCall returns ExternalCall
	 *
	 * Constraint:
	 *     (target=[External|ID] arguments+=Exp arguments+=Exp*)
	 */
	protected void sequence_ExternalCall(ISerializationContext context, ExternalCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns External
	 *     External returns External
	 *
	 * Constraint:
	 *     (name=ID parameters+=ID parameters+=ID*)
	 */
	protected void sequence_External(ISerializationContext context, External semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Div
	 *     Exp.Plus_1_0_0_1 returns Div
	 *     Exp.Minus_1_0_1_1 returns Div
	 *     Factor returns Div
	 *     Factor.Mult_1_0_0_1 returns Div
	 *     Factor.Div_1_0_1_1 returns Div
	 *
	 * Constraint:
	 *     (left=Factor_Div_1_0_1_1 right=PrimExp)
	 */
	protected void sequence_Factor(ISerializationContext context, Div semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.DIV__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.DIV__LEFT));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.DIV__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.DIV__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getDivLeftAction_1_0_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimExpParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Mult
	 *     Exp.Plus_1_0_0_1 returns Mult
	 *     Exp.Minus_1_0_1_1 returns Mult
	 *     Factor returns Mult
	 *     Factor.Mult_1_0_0_1 returns Mult
	 *     Factor.Div_1_0_1_1 returns Mult
	 *
	 * Constraint:
	 *     (left=Factor_Mult_1_0_0_1 right=PrimExp)
	 */
	protected void sequence_Factor(ISerializationContext context, Mult semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.MULT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.MULT__LEFT));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.MULT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.MULT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getMultLeftAction_1_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimExpParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Logic returns Or
	 *     Logic.Or_1_1 returns Or
	 *
	 * Constraint:
	 *     (left=Logic_Or_1_1 right=Conjunction)
	 */
	protected void sequence_Logic(ISerializationContext context, Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogicAccess().getOrLeftAction_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getLogicAccess().getRightConjunctionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Expression
	 *     Exp.Plus_1_0_0_1 returns Expression
	 *     Exp.Minus_1_0_1_1 returns Expression
	 *     Factor returns Expression
	 *     Factor.Mult_1_0_0_1 returns Expression
	 *     Factor.Div_1_0_1_1 returns Expression
	 *     PrimExp returns Expression
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_PrimExp(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.EXPRESSION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.EXPRESSION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimExpAccess().getExpExpParserRuleCall_2_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Logic returns LogicExp
	 *     Logic.Or_1_1 returns LogicExp
	 *     Conjunction returns LogicExp
	 *     Conjunction.And_1_1 returns LogicExp
	 *     PrimLogic returns LogicExp
	 *
	 * Constraint:
	 *     logic=Logic
	 */
	protected void sequence_PrimLogic(ISerializationContext context, LogicExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.LOGIC_EXP__LOGIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.LOGIC_EXP__LOGIC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimLogicAccess().getLogicLogicParserRuleCall_1_1_0(), semanticObject.getLogic());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Registationsystem returns Registationsystem
	 *
	 * Constraint:
	 *     (name=ID declarations+=Declaration*)
	 */
	protected void sequence_Registationsystem(ISerializationContext context, Registationsystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Register
	 *     Register returns Register
	 *
	 * Constraint:
	 *     (type=[Entity|ID] name=ID)
	 */
	protected void sequence_Register(ISerializationContext context, Register semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.REGISTER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.REGISTER__TYPE));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.REGISTER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.REGISTER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRegisterAccess().getTypeEntityIDTerminalRuleCall_1_0_1(), semanticObject.eGet(RegistrationDSLPackage.Literals.REGISTER__TYPE, false));
		feeder.accept(grammarAccess.getRegisterAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Relation
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     (name=ID target=[Entity|ID])
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.RELATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.RELATION__NAME));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.RELATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.RELATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRelationAccess().getTargetEntityIDTerminalRuleCall_3_0_1(), semanticObject.eGet(RegistrationDSLPackage.Literals.RELATION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Require
	 *     Require returns Require
	 *
	 * Constraint:
	 *     logic=Logic
	 */
	protected void sequence_Require(ISerializationContext context, Require semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.REQUIRE__LOGIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.REQUIRE__LOGIC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequireAccess().getLogicLogicParserRuleCall_1_0(), semanticObject.getLogic());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Select
	 *     Select returns Select
	 *
	 * Constraint:
	 *     (selectType=[Entity|ID] entityName=ID)
	 */
	protected void sequence_Select(ISerializationContext context, Select semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.SELECT__SELECT_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.SELECT__SELECT_TYPE));
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.SELECT__ENTITY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.SELECT__ENTITY_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSelectAccess().getSelectTypeEntityIDTerminalRuleCall_1_0_1(), semanticObject.eGet(RegistrationDSLPackage.Literals.SELECT__SELECT_TYPE, false));
		feeder.accept(grammarAccess.getSelectAccess().getEntityNameIDTerminalRuleCall_2_0(), semanticObject.getEntityName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Variable
	 *     Exp.Plus_1_0_0_1 returns Variable
	 *     Exp.Minus_1_0_1_1 returns Variable
	 *     Factor returns Variable
	 *     Factor.Mult_1_0_0_1 returns Variable
	 *     Factor.Div_1_0_1_1 returns Variable
	 *     PrimExp returns Variable
	 *     Var returns Variable
	 *
	 * Constraint:
	 *     name=[Attribute|ID]
	 */
	protected void sequence_Var(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RegistrationDSLPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RegistrationDSLPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarAccess().getNameAttributeIDTerminalRuleCall_1_0_1(), semanticObject.eGet(RegistrationDSLPackage.Literals.VARIABLE__NAME, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns Workflow
	 *     Workflow returns Workflow
	 *
	 * Constraint:
	 *     (name=ID statements+=Statement*)
	 */
	protected void sequence_Workflow(ISerializationContext context, Workflow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
