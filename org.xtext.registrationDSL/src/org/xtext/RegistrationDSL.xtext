grammar org.xtext.RegistrationDSL with org.eclipse.xtext.common.Terminals

generate registrationDSL "http://www.xtext.org/RegistrationDSL"

Registationsystem: //car rental version
	'system' name =ID '{' declarations += Declaration* '}'
;
Declaration:
	Entity | Workflow
;

Entity:
	'entity' name=ID (':' base=[Entity])? '{' fields += Field* '}'
;

Field:
	Attribute | Relation | Require
;

Attribute:
	'attribute' name=ID ':' type=ID
;

Relation:
	'relation' name=ID ':' target=[Entity]
;

Require:
	'require' logic=Logic	
;

Workflow:
	'workflow' name=ID '{' statements += Statement* '}'
;

Statement:
	Select | Add | Register //| Set
;

Select:// this is wrong
	'select' selectType=[Entity] entityName=ID //('where' '{'  '}' )?
;

Add: //this is wrong
	'add' selectedEntityName=ID 'to' toEntity=ID '.' toEntityRelation=ID // check if it's right later
;

Register:
	'register' type=[Entity] name=ID
;
/*Set: // Do we need this?
	"set" name=ID
;*/

Logic returns LogicExp:
	Conjunction ('||' {Or.left=current} right=Conjunction)*
;

Conjunction returns LogicExp:
	PrimLogic ('&&' {And.left=current} right=PrimLogic)*
;

PrimLogic returns LogicExp:
	Comparison | '[' logic=Logic ']'
;


Comparison:
	left=Exp op=CompareOp right=Exp
;

CompareOp:
	'<' | '>' | '==' | '<=' | '>='
;

Exp returns Expression:
	Factor (('+' {Plus.left=current}| '-' {Minus.left=current}) right=Factor)*
;

Factor returns Expression:
	PrimExp (('*' {Mult.left=current} | '/' {Div.left=current}) right=PrimExp)*
;

PrimExp returns Expression:
	Var | Constant | '(' exp=Exp ')'
;

Var:
	{Variable} name=[Attribute]
;

Constant:
	value=INT
;

