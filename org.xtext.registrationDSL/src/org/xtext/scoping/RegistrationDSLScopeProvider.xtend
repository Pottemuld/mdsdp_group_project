/*
 * generated by Xtext 2.25.0
 */
package org.xtext.scoping

import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.registrationDSL.Variable
import org.xtext.registrationDSL.RegistrationDSLPackage.Literals
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.xtext.registrationDSL.Entity
import java.util.ArrayList
import org.xtext.registrationDSL.Attribute
import java.util.HashSet
import java.util.Collections

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class RegistrationDSLScopeProvider extends AbstractRegistrationDSLScopeProvider {
	override IScope getScope (EObject context, EReference reference) {
		switch context {
			Variable case reference ==Literals.VARIABLE__NAME: {
				val entity = EcoreUtil2::getContainerOfType(context, Entity)
				return Scopes.scopeFor(entity.allAttributes)
			}
		}
		super.getScope(context, reference)
	}
	
	def Iterable<? extends EObject> allAttributes(Entity entity) {
		val candidates = new ArrayList<Attribute>
		val alreadySeen = new HashSet<Entity>
		var e = entity
		while(e!==null) {
			if(alreadySeen.contains(e)) {
				return Collections.EMPTY_LIST
			}
			alreadySeen.add(e)
			candidates.addAll(e.fields.filter(Attribute))
			e = e.base
		}
		candidates
	}
}
