/*
 * generated by Xtext 2.22.0
 */
package dk.sdu.mmmi.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.basicEntityExampleLanguage.EntitySystem
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import dk.sdu.mmmi.mdsd.basicEntityExampleLanguage.Entity
import java.util.ArrayList
import dk.sdu.mmmi.mdsd.basicEntityExampleLanguage.Attribute

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BasicEntityExampleLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val EntitySystem modelInstance = resource.allContents.filter(EntitySystem).next
		modelInstance.display
		modelInstance.declarations.filter(Entity).forEach[generateEntityFile(modelInstance.name,fsa)]
	}
		
	def generateEntityFile(Entity entity, String systemName, IFileSystemAccess2 fsa) {
		fsa.generateFile(systemName.toFirstLower+"/"+entity.name+".java", entity.generateEntity(systemName))
	}
		
	def CharSequence generateEntity(Entity entity, String systemName) '''
	package «systemName.toFirstLower»;
	import java.util.*;
	public class «entity.name»«IF entity.base!==null» extends «entity.base.name»«ENDIF» {
		«entity.generateConstructor»
		«FOR a:entity.attributes»
		private «a.type» _«a.name»;
		public «a.type» get«a.name.toFirstUpper»() {
			return _«a.name»;
		}
		public void set«a.name.toFirstUpper»(«a.type» value) {
			this._«a.name» = value;
		}
		«ENDFOR»
	}
	'''
		
	def generateConstructor(Entity entity) '''
	public «entity.name»(«FOR a:entity.allAttributes SEPARATOR ", "»«a.type» _«a.name»«ENDFOR») {
		«IF entity.base!==null»
		super(«FOR a:entity.base.allAttributes SEPARATOR ", "»_«a.name»«ENDFOR»);
		«ENDIF»
		«FOR a:entity.attributes»
		this._«a.name» = _«a.name»;
		«ENDFOR»
	}
	'''
		
	def allAttributes(Entity entity) {// Attributes from entity and transitively all base
		val result = new ArrayList<Attribute>
		var currentEntity = entity
		while(currentEntity!==null) {
			result.addAll(currentEntity.attributes)
			currentEntity = currentEntity.base
		}
		result
	}

	def display(EObject model) {
  		val res = new XMLResourceImpl
  		res.contents.add(EcoreUtil::copy(model))
  		System::out.println("Dump of model:")
  		res.save(System.out, null);
	}
	
}
