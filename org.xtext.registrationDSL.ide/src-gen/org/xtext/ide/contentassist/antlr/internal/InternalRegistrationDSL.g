/*
 * generated by Xtext 2.25.0
 */
grammar InternalRegistrationDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.RegistrationDSLGrammarAccess;

}
@parser::members {
	private RegistrationDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(RegistrationDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRegistationsystem
entryRuleRegistationsystem
:
{ before(grammarAccess.getRegistationsystemRule()); }
	 ruleRegistationsystem
{ after(grammarAccess.getRegistationsystemRule()); } 
	 EOF 
;

// Rule Registationsystem
ruleRegistationsystem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegistationsystemAccess().getGroup()); }
		(rule__Registationsystem__Group__0)
		{ after(grammarAccess.getRegistationsystemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
		(rule__Declaration__Alternatives)
		{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntity
entryRuleEntity
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityAccess().getGroup()); }
		(rule__Entity__Group__0)
		{ after(grammarAccess.getEntityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleField
entryRuleField
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldAccess().getAlternatives()); }
		(rule__Field__Alternatives)
		{ after(grammarAccess.getFieldAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelation
entryRuleRelation
:
{ before(grammarAccess.getRelationRule()); }
	 ruleRelation
{ after(grammarAccess.getRelationRule()); } 
	 EOF 
;

// Rule Relation
ruleRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationAccess().getGroup()); }
		(rule__Relation__Group__0)
		{ after(grammarAccess.getRelationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRequire
entryRuleRequire
:
{ before(grammarAccess.getRequireRule()); }
	 ruleRequire
{ after(grammarAccess.getRequireRule()); } 
	 EOF 
;

// Rule Require
ruleRequire 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRequireAccess().getGroup()); }
		(rule__Require__Group__0)
		{ after(grammarAccess.getRequireAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWorkflow
entryRuleWorkflow
:
{ before(grammarAccess.getWorkflowRule()); }
	 ruleWorkflow
{ after(grammarAccess.getWorkflowRule()); } 
	 EOF 
;

// Rule Workflow
ruleWorkflow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWorkflowAccess().getGroup()); }
		(rule__Workflow__Group__0)
		{ after(grammarAccess.getWorkflowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelect
entryRuleSelect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getGroup()); }
		(rule__Select__Group__0)
		{ after(grammarAccess.getSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdd
entryRuleAdd
:
{ before(grammarAccess.getAddRule()); }
	 ruleAdd
{ after(grammarAccess.getAddRule()); } 
	 EOF 
;

// Rule Add
ruleAdd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddAccess().getGroup()); }
		(rule__Add__Group__0)
		{ after(grammarAccess.getAddAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegister
entryRuleRegister
:
{ before(grammarAccess.getRegisterRule()); }
	 ruleRegister
{ after(grammarAccess.getRegisterRule()); } 
	 EOF 
;

// Rule Register
ruleRegister 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegisterAccess().getGroup()); }
		(rule__Register__Group__0)
		{ after(grammarAccess.getRegisterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogic
entryRuleLogic
:
{ before(grammarAccess.getLogicRule()); }
	 ruleLogic
{ after(grammarAccess.getLogicRule()); } 
	 EOF 
;

// Rule Logic
ruleLogic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicAccess().getGroup()); }
		(rule__Logic__Group__0)
		{ after(grammarAccess.getLogicAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConjunction
entryRuleConjunction
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConjunctionAccess().getGroup()); }
		(rule__Conjunction__Group__0)
		{ after(grammarAccess.getConjunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimLogic
entryRulePrimLogic
:
{ before(grammarAccess.getPrimLogicRule()); }
	 rulePrimLogic
{ after(grammarAccess.getPrimLogicRule()); } 
	 EOF 
;

// Rule PrimLogic
rulePrimLogic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimLogicAccess().getAlternatives()); }
		(rule__PrimLogic__Alternatives)
		{ after(grammarAccess.getPrimLogicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompareOp
entryRuleCompareOp
:
{ before(grammarAccess.getCompareOpRule()); }
	 ruleCompareOp
{ after(grammarAccess.getCompareOpRule()); } 
	 EOF 
;

// Rule CompareOp
ruleCompareOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompareOpAccess().getAlternatives()); }
		(rule__CompareOp__Alternatives)
		{ after(grammarAccess.getCompareOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExp
entryRuleExp
:
{ before(grammarAccess.getExpRule()); }
	 ruleExp
{ after(grammarAccess.getExpRule()); } 
	 EOF 
;

// Rule Exp
ruleExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpAccess().getGroup()); }
		(rule__Exp__Group__0)
		{ after(grammarAccess.getExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFactor
entryRuleFactor
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorAccess().getGroup()); }
		(rule__Factor__Group__0)
		{ after(grammarAccess.getFactorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimExp
entryRulePrimExp
:
{ before(grammarAccess.getPrimExpRule()); }
	 rulePrimExp
{ after(grammarAccess.getPrimExpRule()); } 
	 EOF 
;

// Rule PrimExp
rulePrimExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimExpAccess().getAlternatives()); }
		(rule__PrimExp__Alternatives)
		{ after(grammarAccess.getPrimExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVar
entryRuleVar
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAccess().getGroup()); }
		(rule__Var__Group__0)
		{ after(grammarAccess.getVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getValueAssignment()); }
		(rule__Constant__ValueAssignment)
		{ after(grammarAccess.getConstantAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getEntityParserRuleCall_0()); }
		ruleEntity
		{ after(grammarAccess.getDeclarationAccess().getEntityParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getWorkflowParserRuleCall_1()); }
		ruleWorkflow
		{ after(grammarAccess.getDeclarationAccess().getWorkflowParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getAttributeParserRuleCall_0()); }
		ruleAttribute
		{ after(grammarAccess.getFieldAccess().getAttributeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFieldAccess().getRelationParserRuleCall_1()); }
		ruleRelation
		{ after(grammarAccess.getFieldAccess().getRelationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFieldAccess().getRequireParserRuleCall_2()); }
		ruleRequire
		{ after(grammarAccess.getFieldAccess().getRequireParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getSelectParserRuleCall_0()); }
		ruleSelect
		{ after(grammarAccess.getStatementAccess().getSelectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAddParserRuleCall_1()); }
		ruleAdd
		{ after(grammarAccess.getStatementAccess().getAddParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getRegisterParserRuleCall_2()); }
		ruleRegister
		{ after(grammarAccess.getStatementAccess().getRegisterParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimLogic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimLogicAccess().getComparisonParserRuleCall_0()); }
		ruleComparison
		{ after(grammarAccess.getPrimLogicAccess().getComparisonParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimLogicAccess().getGroup_1()); }
		(rule__PrimLogic__Group_1__0)
		{ after(grammarAccess.getPrimLogicAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareOpAccess().getLessThanSignKeyword_0()); }
		'<'
		{ after(grammarAccess.getCompareOpAccess().getLessThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOpAccess().getGreaterThanSignKeyword_1()); }
		'>'
		{ after(grammarAccess.getCompareOpAccess().getGreaterThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOpAccess().getEqualsSignEqualsSignKeyword_2()); }
		'=='
		{ after(grammarAccess.getCompareOpAccess().getEqualsSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOpAccess().getLessThanSignEqualsSignKeyword_3()); }
		'<='
		{ after(grammarAccess.getCompareOpAccess().getLessThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOpAccess().getGreaterThanSignEqualsSignKeyword_4()); }
		'>='
		{ after(grammarAccess.getCompareOpAccess().getGreaterThanSignEqualsSignKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getGroup_1_0_0()); }
		(rule__Exp__Group_1_0_0__0)
		{ after(grammarAccess.getExpAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpAccess().getGroup_1_0_1()); }
		(rule__Exp__Group_1_0_1__0)
		{ after(grammarAccess.getExpAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getGroup_1_0_0()); }
		(rule__Factor__Group_1_0_0__0)
		{ after(grammarAccess.getFactorAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getGroup_1_0_1()); }
		(rule__Factor__Group_1_0_1__0)
		{ after(grammarAccess.getFactorAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimExpAccess().getVarParserRuleCall_0()); }
		ruleVar
		{ after(grammarAccess.getPrimExpAccess().getVarParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimExpAccess().getConstantParserRuleCall_1()); }
		ruleConstant
		{ after(grammarAccess.getPrimExpAccess().getConstantParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimExpAccess().getGroup_2()); }
		(rule__PrimExp__Group_2__0)
		{ after(grammarAccess.getPrimExpAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Registationsystem__Group__0__Impl
	rule__Registationsystem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegistationsystemAccess().getSystemKeyword_0()); }
	'system'
	{ after(grammarAccess.getRegistationsystemAccess().getSystemKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Registationsystem__Group__1__Impl
	rule__Registationsystem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegistationsystemAccess().getNameAssignment_1()); }
	(rule__Registationsystem__NameAssignment_1)
	{ after(grammarAccess.getRegistationsystemAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Registationsystem__Group__2__Impl
	rule__Registationsystem__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegistationsystemAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRegistationsystemAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Registationsystem__Group__3__Impl
	rule__Registationsystem__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegistationsystemAccess().getDeclarationsAssignment_3()); }
	(rule__Registationsystem__DeclarationsAssignment_3)*
	{ after(grammarAccess.getRegistationsystemAccess().getDeclarationsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Registationsystem__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegistationsystemAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getRegistationsystemAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__0__Impl
	rule__Entity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getEntityKeyword_0()); }
	'entity'
	{ after(grammarAccess.getEntityAccess().getEntityKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__1__Impl
	rule__Entity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getNameAssignment_1()); }
	(rule__Entity__NameAssignment_1)
	{ after(grammarAccess.getEntityAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__2__Impl
	rule__Entity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getGroup_2()); }
	(rule__Entity__Group_2__0)?
	{ after(grammarAccess.getEntityAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__3__Impl
	rule__Entity__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__4__Impl
	rule__Entity__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getFieldsAssignment_4()); }
	(rule__Entity__FieldsAssignment_4)*
	{ after(grammarAccess.getEntityAccess().getFieldsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_2__0__Impl
	rule__Entity__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getColonKeyword_2_0()); }
	':'
	{ after(grammarAccess.getEntityAccess().getColonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getBaseAssignment_2_1()); }
	(rule__Entity__BaseAssignment_2_1)
	{ after(grammarAccess.getEntityAccess().getBaseAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAttributeKeyword_0()); }
	'attribute'
	{ after(grammarAccess.getAttributeAccess().getAttributeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
	(rule__Attribute__NameAssignment_1)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getAttributeAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypeAssignment_3()); }
	(rule__Attribute__TypeAssignment_3)
	{ after(grammarAccess.getAttributeAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__0__Impl
	rule__Relation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getRelationKeyword_0()); }
	'relation'
	{ after(grammarAccess.getRelationAccess().getRelationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__1__Impl
	rule__Relation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getNameAssignment_1()); }
	(rule__Relation__NameAssignment_1)
	{ after(grammarAccess.getRelationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__2__Impl
	rule__Relation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getRelationAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getTargetAssignment_3()); }
	(rule__Relation__TargetAssignment_3)
	{ after(grammarAccess.getRelationAccess().getTargetAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Require__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Require__Group__0__Impl
	rule__Require__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequireAccess().getRequireKeyword_0()); }
	'require'
	{ after(grammarAccess.getRequireAccess().getRequireKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Require__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequireAccess().getLogicAssignment_1()); }
	(rule__Require__LogicAssignment_1)
	{ after(grammarAccess.getRequireAccess().getLogicAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Workflow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__0__Impl
	rule__Workflow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getWorkflowKeyword_0()); }
	'workflow'
	{ after(grammarAccess.getWorkflowAccess().getWorkflowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__1__Impl
	rule__Workflow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getNameAssignment_1()); }
	(rule__Workflow__NameAssignment_1)
	{ after(grammarAccess.getWorkflowAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__2__Impl
	rule__Workflow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getWorkflowAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__3__Impl
	rule__Workflow__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getStatementsAssignment_3()); }
	(rule__Workflow__StatementsAssignment_3)*
	{ after(grammarAccess.getWorkflowAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Workflow__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getWorkflowAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
	'select'
	{ after(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__1__Impl
	rule__Select__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSelectTypeAssignment_1()); }
	(rule__Select__SelectTypeAssignment_1)
	{ after(grammarAccess.getSelectAccess().getSelectTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getEntityNameAssignment_2()); }
	(rule__Select__EntityNameAssignment_2)
	{ after(grammarAccess.getSelectAccess().getEntityNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Add__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__0__Impl
	rule__Add__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getAddKeyword_0()); }
	'add'
	{ after(grammarAccess.getAddAccess().getAddKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__1__Impl
	rule__Add__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getSelectedEntityNameAssignment_1()); }
	(rule__Add__SelectedEntityNameAssignment_1)
	{ after(grammarAccess.getAddAccess().getSelectedEntityNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__2__Impl
	rule__Add__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getToKeyword_2()); }
	'to'
	{ after(grammarAccess.getAddAccess().getToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__3__Impl
	rule__Add__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getToEntityAssignment_3()); }
	(rule__Add__ToEntityAssignment_3)
	{ after(grammarAccess.getAddAccess().getToEntityAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__4__Impl
	rule__Add__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getAddAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Add__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddAccess().getToEntityRelationAssignment_5()); }
	(rule__Add__ToEntityRelationAssignment_5)
	{ after(grammarAccess.getAddAccess().getToEntityRelationAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Register__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__0__Impl
	rule__Register__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getRegisterKeyword_0()); }
	'register'
	{ after(grammarAccess.getRegisterAccess().getRegisterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__1__Impl
	rule__Register__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getTypeAssignment_1()); }
	(rule__Register__TypeAssignment_1)
	{ after(grammarAccess.getRegisterAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getNameAssignment_2()); }
	(rule__Register__NameAssignment_2)
	{ after(grammarAccess.getRegisterAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Logic__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Logic__Group__0__Impl
	rule__Logic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAccess().getConjunctionParserRuleCall_0()); }
	ruleConjunction
	{ after(grammarAccess.getLogicAccess().getConjunctionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Logic__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAccess().getGroup_1()); }
	(rule__Logic__Group_1__0)*
	{ after(grammarAccess.getLogicAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Logic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Logic__Group_1__0__Impl
	rule__Logic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAccess().getVerticalLineVerticalLineKeyword_1_0()); }
	'||'
	{ after(grammarAccess.getLogicAccess().getVerticalLineVerticalLineKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Logic__Group_1__1__Impl
	rule__Logic__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAccess().getOrLeftAction_1_1()); }
	()
	{ after(grammarAccess.getLogicAccess().getOrLeftAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Logic__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicAccess().getRightAssignment_1_2()); }
	(rule__Logic__RightAssignment_1_2)
	{ after(grammarAccess.getLogicAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group__0__Impl
	rule__Conjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getPrimLogicParserRuleCall_0()); }
	rulePrimLogic
	{ after(grammarAccess.getConjunctionAccess().getPrimLogicParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getGroup_1()); }
	(rule__Conjunction__Group_1__0)*
	{ after(grammarAccess.getConjunctionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group_1__0__Impl
	rule__Conjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getAmpersandAmpersandKeyword_1_0()); }
	'&&'
	{ after(grammarAccess.getConjunctionAccess().getAmpersandAmpersandKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group_1__1__Impl
	rule__Conjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getAndLeftAction_1_1()); }
	()
	{ after(grammarAccess.getConjunctionAccess().getAndLeftAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
	(rule__Conjunction__RightAssignment_1_2)
	{ after(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimLogic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimLogic__Group_1__0__Impl
	rule__PrimLogic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimLogic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimLogicAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getPrimLogicAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimLogic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimLogic__Group_1__1__Impl
	rule__PrimLogic__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimLogic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimLogicAccess().getLogicAssignment_1_1()); }
	(rule__PrimLogic__LogicAssignment_1_1)
	{ after(grammarAccess.getPrimLogicAccess().getLogicAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimLogic__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimLogic__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimLogic__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimLogicAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getPrimLogicAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getLeftAssignment_0()); }
	(rule__Comparison__LeftAssignment_0)
	{ after(grammarAccess.getComparisonAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
	rule__Comparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOpAssignment_1()); }
	(rule__Comparison__OpAssignment_1)
	{ after(grammarAccess.getComparisonAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_2()); }
	(rule__Comparison__RightAssignment_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group__0__Impl
	rule__Exp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getFactorParserRuleCall_0()); }
	ruleFactor
	{ after(grammarAccess.getExpAccess().getFactorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getGroup_1()); }
	(rule__Exp__Group_1__0)*
	{ after(grammarAccess.getExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__0__Impl
	rule__Exp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getAlternatives_1_0()); }
	(rule__Exp__Alternatives_1_0)
	{ after(grammarAccess.getExpAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getRightAssignment_1_1()); }
	(rule__Exp__RightAssignment_1_1)
	{ after(grammarAccess.getExpAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_0__0__Impl
	rule__Exp__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getPlusSignKeyword_1_0_0_0()); }
	'+'
	{ after(grammarAccess.getExpAccess().getPlusSignKeyword_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getPlusLeftAction_1_0_0_1()); }
	()
	{ after(grammarAccess.getExpAccess().getPlusLeftAction_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_1__0__Impl
	rule__Exp__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getHyphenMinusKeyword_1_0_1_0()); }
	'-'
	{ after(grammarAccess.getExpAccess().getHyphenMinusKeyword_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getMinusLeftAction_1_0_1_1()); }
	()
	{ after(grammarAccess.getExpAccess().getMinusLeftAction_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group__0__Impl
	rule__Factor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getPrimExpParserRuleCall_0()); }
	rulePrimExp
	{ after(grammarAccess.getFactorAccess().getPrimExpParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getGroup_1()); }
	(rule__Factor__Group_1__0)*
	{ after(grammarAccess.getFactorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getAlternatives_1_0()); }
	(rule__Factor__Alternatives_1_0)
	{ after(grammarAccess.getFactorAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getRightAssignment_1_1()); }
	(rule__Factor__RightAssignment_1_1)
	{ after(grammarAccess.getFactorAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1_0_0__0__Impl
	rule__Factor__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getAsteriskKeyword_1_0_0_0()); }
	'*'
	{ after(grammarAccess.getFactorAccess().getAsteriskKeyword_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getMultLeftAction_1_0_0_1()); }
	()
	{ after(grammarAccess.getFactorAccess().getMultLeftAction_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1_0_1__0__Impl
	rule__Factor__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getSolidusKeyword_1_0_1_0()); }
	'/'
	{ after(grammarAccess.getFactorAccess().getSolidusKeyword_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getDivLeftAction_1_0_1_1()); }
	()
	{ after(grammarAccess.getFactorAccess().getDivLeftAction_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimExp__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimExp__Group_2__0__Impl
	rule__PrimExp__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimExp__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimExpAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPrimExpAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimExp__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimExp__Group_2__1__Impl
	rule__PrimExp__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimExp__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimExpAccess().getExpAssignment_2_1()); }
	(rule__PrimExp__ExpAssignment_2_1)
	{ after(grammarAccess.getPrimExpAccess().getExpAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimExp__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimExp__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimExp__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimExpAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPrimExpAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group__0__Impl
	rule__Var__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getVariableAction_0()); }
	()
	{ after(grammarAccess.getVarAccess().getVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getNameAssignment_1()); }
	(rule__Var__NameAssignment_1)
	{ after(grammarAccess.getVarAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Registationsystem__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegistationsystemAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRegistationsystemAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Registationsystem__DeclarationsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegistationsystemAccess().getDeclarationsDeclarationParserRuleCall_3_0()); }
		ruleDeclaration
		{ after(grammarAccess.getRegistationsystemAccess().getDeclarationsDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__BaseAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getBaseEntityCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getEntityAccess().getBaseEntityIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEntityAccess().getBaseEntityIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getEntityAccess().getBaseEntityCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__FieldsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_4_0()); }
		ruleField
		{ after(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTypeIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getTypeIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__TargetAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getTargetEntityCrossReference_3_0()); }
		(
			{ before(grammarAccess.getRelationAccess().getTargetEntityIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRelationAccess().getTargetEntityIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getRelationAccess().getTargetEntityCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__LogicAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequireAccess().getLogicLogicParserRuleCall_1_0()); }
		ruleLogic
		{ after(grammarAccess.getRequireAccess().getLogicLogicParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getWorkflowAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Workflow__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getWorkflowAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__SelectTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getSelectTypeEntityCrossReference_1_0()); }
		(
			{ before(grammarAccess.getSelectAccess().getSelectTypeEntityIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSelectAccess().getSelectTypeEntityIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getSelectAccess().getSelectTypeEntityCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__EntityNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getEntityNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getSelectAccess().getEntityNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__SelectedEntityNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getSelectedEntityNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAddAccess().getSelectedEntityNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__ToEntityAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getToEntityIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getAddAccess().getToEntityIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__ToEntityRelationAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddAccess().getToEntityRelationIDTerminalRuleCall_5_0()); }
		RULE_ID
		{ after(grammarAccess.getAddAccess().getToEntityRelationIDTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getTypeEntityCrossReference_1_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getTypeEntityIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRegisterAccess().getTypeEntityIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getRegisterAccess().getTypeEntityCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getRegisterAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicAccess().getRightConjunctionParserRuleCall_1_2_0()); }
		ruleConjunction
		{ after(grammarAccess.getLogicAccess().getRightConjunctionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionAccess().getRightPrimLogicParserRuleCall_1_2_0()); }
		rulePrimLogic
		{ after(grammarAccess.getConjunctionAccess().getRightPrimLogicParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimLogic__LogicAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimLogicAccess().getLogicLogicParserRuleCall_1_1_0()); }
		ruleLogic
		{ after(grammarAccess.getPrimLogicAccess().getLogicLogicParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getLeftExpParserRuleCall_0_0()); }
		ruleExp
		{ after(grammarAccess.getComparisonAccess().getLeftExpParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpCompareOpParserRuleCall_1_0()); }
		ruleCompareOp
		{ after(grammarAccess.getComparisonAccess().getOpCompareOpParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getComparisonAccess().getRightExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_1_0()); }
		ruleFactor
		{ after(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getRightPrimExpParserRuleCall_1_1_0()); }
		rulePrimExp
		{ after(grammarAccess.getFactorAccess().getRightPrimExpParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimExp__ExpAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimExpAccess().getExpExpParserRuleCall_2_1_0()); }
		ruleExp
		{ after(grammarAccess.getPrimExpAccess().getExpExpParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAccess().getNameAttributeCrossReference_1_0()); }
		(
			{ before(grammarAccess.getVarAccess().getNameAttributeIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVarAccess().getNameAttributeIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getVarAccess().getNameAttributeCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
